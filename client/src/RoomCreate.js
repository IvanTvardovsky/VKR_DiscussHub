import React, { useState } from 'react';
import {
    Button,
    TextField,
    Typography,
    Container,
    Grid,
    RadioGroup,
    FormControlLabel,
    Radio,
    MenuItem,
    Box,
    FormControl,
    FormLabel,
    Checkbox,
    FormGroup,
} from '@mui/material';

const topics = [
    { id: 1, title: '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', icon: 'üíª' },
    { id: 2, title: '–ó–¥–æ—Ä–æ–≤—å–µ –∏ –±–ª–∞–≥–æ–ø–æ–ª—É—á–∏–µ', icon: 'üè•' },
    { id: 3, title: '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏ —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ', icon: 'üìö' },
    { id: 4, title: '–ò—Å–∫—É—Å—Å—Ç–≤–æ –∏ –∫—É–ª—å—Ç—É—Ä–∞', icon: 'üé®' },
    { id: 5, title: '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –∏ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è', icon: '‚úàÔ∏è' },
    { id: 6, title: '–≠–∫–æ–ª–æ–≥–∏—è –∏ —É—Å—Ç–æ–π—á–∏–≤–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ', icon: 'üå±' }
];

const subtopics = {
    1: [
        { id: 101, title: '–ö–∞–∫ –ò–ò –≤–ª–∏—è–µ—Ç –Ω–∞ —Ä—ã–Ω–æ–∫ —Ç—Ä—É–¥–∞?' },
        { id: 102, title: '–≠—Ç–∏–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–≤—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π' },
        { id: 103, title: '–†–∞–∑–≤–∏—Ç–∏–µ –∫–≤–∞–Ω—Ç–æ–≤—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π' },
        { id: 104, title: '–ò–Ω—Ç–µ—Ä–Ω–µ—Ç –≤–µ—â–µ–π (IoT)' },
        { id: 105, title: '–ö–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å' }
    ],
    2: [
        { id: 201, title: '–ó–¥–æ—Ä–æ–≤–æ–µ –ø–∏—Ç–∞–Ω–∏–µ' },
        { id: 202, title: '–§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å' },
        { id: 203, title: '–ü—Å–∏—Ö–∏—á–µ—Å–∫–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ' },
        { id: 204, title: '–ú–µ–¥–∏—Ç–∞—Ü–∏—è –∏ —Ä–µ–ª–∞–∫—Å–∞—Ü–∏—è' },
        { id: 205, title: '–ü—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∞ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π' }
    ],
    3: [
        { id: 301, title: '–û–Ω–ª–∞–π–Ω-–∫—É—Ä—Å—ã' },
        { id: 302, title: '–ß—Ç–µ–Ω–∏–µ –∏ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞' },
        { id: 303, title: '–Ø–∑—ã–∫–æ–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ' },
        { id: 304, title: '–ù–∞–≤—ã–∫–∏ –±—É–¥—É—â–µ–≥–æ' },
        { id: 305, title: '–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏' }
    ],
    4: [
        { id: 401, title: '–°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–æ' },
        { id: 402, title: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –º—É–∑—ã–∫–∞' },
        { id: 403, title: '–ö–∏–Ω–æ –∏ —Ç–µ–∞—Ç—Ä' },
        { id: 404, title: '–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞ –∏ –ø–æ—ç–∑–∏—è' },
        { id: 405, title: '–ö—É–ª—å—Ç—É—Ä–Ω–æ–µ –Ω–∞—Å–ª–µ–¥–∏–µ' }
    ],
    5: [
        { id: 501, title: '–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è' },
        { id: 502, title: '–ö—É–ª—å—Ç—É—Ä–Ω—ã–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è' },
        { id: 503, title: '–ü—Ä–∏–∫–ª—é—á–µ–Ω—á–µ—Å–∫–∏–π —Ç—É—Ä–∏–∑–º' },
        { id: 504, title: '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è —Å —Å–µ–º—å—ë–π' },
        { id: 505, title: '–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π' }
    ],
    6: [
        { id: 601, title: '–í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º–∞—è —ç–Ω–µ—Ä–≥–∏—è' },
        { id: 602, title: '–≠–∫–æ-–∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã' },
        { id: 603, title: '–ó–µ–ª–µ–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏' },
        { id: 604, title: '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–∏–æ—Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è' },
        { id: 605, title: '–£—Å—Ç–æ–π—á–∏–≤–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ' }
    ]
};

const professionalPurposes = [
    '–ú–æ–∑–≥–æ–≤–æ–π —à—Ç—É—Ä–º',
    '–ó–∞—â–∏—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞',
    '–†–µ—à–µ–Ω–∏–µ –∫–µ–π—Å–∞',
    '–¢–∏–º–±–∏–ª–¥–∏–Ω–≥',
    '–û–±—Å—É–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞'
];

const RoomCreate = ({ onCreateRoom }) => {
    const [step, setStep] = useState(1);
    const [formData, setFormData] = useState({
        name: '',
        mode: 'personal',           // 'personal' –∏–ª–∏ 'professional'
        subType: 'blitz',           // 'blitz' (–±–ª–∏—Ü-–¥–µ–±–∞—Ç—ã) –∏–ª–∏ 'free' (—Å–≤–æ–±–æ–¥–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ)
        topic: 1,                   // –¥–ª—è –±–ª–∏—Ü-–¥–µ–±–∞—Ç–æ–≤
        subtopic: 101,              // –¥–ª—è –±–ª–∏—Ü-–¥–µ–±–∞—Ç–æ–≤
        customTopic: '',            // –¥–ª—è —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è (—Ç–µ–º–∞ ‚Äî –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
        customSubtopic: '',         // –¥–ª—è —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è (–ø–æ–¥—Ç–µ–º–∞ ‚Äî –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        timer: 30,
        maxParticipants: 2,
        description: '',
        accessType: 'open',
        password: '',
        purpose: '',
        keyQuestions: '',
        tags: '',
        hidden: false,
        exportOptions: [],
        dontJoin: false,            // "–Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è—Ç—å –º–µ–Ω—è –≤ –∫–æ–º–Ω–∞—Ç—É" –¥–ª—è –ø—Ä–æ—Ñ. —Ä–µ–∂–∏–º–∞
    });

    const handleNextStep = () => {
        if (step === 1 && validateStep1()) setStep(2);
        else if (step === 2 && validateStep2()) handleCreate();
    };

    const validateStep1 = () => {
        if (formData.name.trim() === '') return false;
        if (formData.mode === 'personal' && formData.subType === 'free' && formData.customTopic.trim() === '') return false;
        return true;
    };

    const validateStep2 = () => {
        if (formData.mode === 'professional') {
            return formData.password.trim() !== '' && formData.purpose !== '';
        } else {
            return formData.accessType === 'closed'
                ? formData.password.trim() !== ''
                : true;
        }
    };

    const handleCreate = () => {
        const baseData = {
            name: formData.name,
            mode: formData.mode,
            subType: formData.subType,
            description: formData.description,
            password: formData.password,
            timer: Number(formData.timer),
            maxParticipants: Number(formData.maxParticipants),
            open: formData.mode === 'personal' && formData.password === '',
        };

        const personalData = formData.mode === 'personal' ? {
            ...(formData.subType === 'blitz' && {
                topic: formData.topic,
                subtopic: formData.subtopic
            }),
            ...(formData.subType === 'free' && {
                customTopic: formData.customTopic,
                customSubtopic: formData.customSubtopic
            })
        } : {};

        const professionalData = formData.mode === 'professional' ? {
            purpose: formData.purpose,
            keyQuestions: formData.keyQuestions.split('\n').filter(q => q.trim()),
            tags: formData.tags.split(',').map(t => t.trim()).filter(t => t),
            hidden: formData.hidden,
            exportOptions: formData.exportOptions,
            dontJoin: formData.dontJoin
        } : {};

        const roomData = {
            ...baseData,
            ...personalData,
            ...professionalData
        };

        // —É–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ undefined –∑–Ω–∞—á–µ–Ω–∏—è
        const cleanedData = Object.fromEntries(
            Object.entries(roomData).filter(([_, v]) =>
                v !== undefined &&
                v !== '' &&
                !(Array.isArray(v) && v.length === 0)
            ))

        console.log("Final room data:", cleanedData);
        onCreateRoom(cleanedData);
    };

    return (
        <Container component="main" maxWidth="md">
            <Typography variant="h5" component="h1" sx={{ mb: 3 }}>
                –°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É ({step}/2)
            </Typography>

            {step === 1 && (
                <Grid container spacing={2}>
                    <Grid item xs={12}>
                        <TextField
                            fullWidth
                            label="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã"
                            value={formData.name}
                            onChange={(e) => setFormData({ ...formData, name: e.target.value })}
                            required
                        />
                    </Grid>

                    <Grid item xs={12}>
                        <FormControl component="fieldset">
                            <FormLabel component="legend">–†–µ–∂–∏–º –∫–æ–º–Ω–∞—Ç—ã</FormLabel>
                            <RadioGroup
                                row
                                value={formData.mode}
                                onChange={(e) => setFormData({ ...formData, mode: e.target.value })}
                            >
                                <FormControlLabel
                                    value="personal"
                                    control={<Radio />}
                                    label="–õ–∏—á–Ω—ã–π —Ä–µ–∂–∏–º"
                                />
                                <FormControlLabel
                                    value="professional"
                                    control={<Radio />}
                                    label="–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º"
                                />
                            </RadioGroup>
                        </FormControl>
                    </Grid>

                    {formData.mode === 'personal' && (
                        <Grid item xs={12}>
                            <FormControl component="fieldset">
                                <FormLabel component="legend">–§–æ—Ä–º–∞—Ç –æ–±—â–µ–Ω–∏—è</FormLabel>
                                <RadioGroup
                                    row
                                    value={formData.subType}
                                    onChange={(e) => setFormData({ ...formData, subType: e.target.value })}
                                >
                                    <FormControlLabel
                                        value="blitz"
                                        control={<Radio />}
                                        label="‚è±Ô∏è –ë–ª–∏—Ü-–¥–µ–±–∞—Ç—ã"
                                    />
                                    <FormControlLabel
                                        value="free"
                                        control={<Radio />}
                                        label="üí¨ –°–≤–æ–±–æ–¥–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ"
                                    />
                                </RadioGroup>
                            </FormControl>
                        </Grid>
                    )}

                    {formData.mode === 'personal' && (
                        <>
                            {formData.subType === 'blitz' ? (
                                <>
                                    <Grid item xs={6}>
                                        <TextField
                                            select
                                            fullWidth
                                            label="–¢–µ–º–∞"
                                            value={formData.topic}
                                            onChange={(e) =>
                                                setFormData({
                                                    ...formData,
                                                    topic: parseInt(e.target.value, 10),
                                                    subtopic: subtopics[parseInt(e.target.value, 10)][0]?.id
                                                })
                                            }
                                        >
                                            {topics.map((topic) => (
                                                <MenuItem key={topic.id} value={topic.id}>
                                                    {topic.icon} {topic.title}
                                                </MenuItem>
                                            ))}
                                        </TextField>
                                    </Grid>
                                    <Grid item xs={6}>
                                        <TextField
                                            select
                                            fullWidth
                                            label="–°—É–±—Ç–æ–ø–∏–∫"
                                            value={formData.subtopic}
                                            onChange={(e) => setFormData({ ...formData, subtopic: parseInt(e.target.value, 10) })}
                                        >
                                            {subtopics[formData.topic]?.map((sub) => (
                                                <MenuItem key={sub.id} value={sub.id}>
                                                    {sub.title}
                                                </MenuItem>
                                            ))}
                                        </TextField>
                                    </Grid>
                                </>
                            ) : (
                                <>
                                    <Grid item xs={6}>
                                        <TextField
                                            fullWidth
                                            label="–¢–µ–º–∞"
                                            value={formData.customTopic}
                                            onChange={(e) => setFormData({ ...formData, customTopic: e.target.value })}
                                            required
                                        />
                                    </Grid>
                                    <Grid item xs={6}>
                                        <TextField
                                            fullWidth
                                            label="–ü–æ–¥—Ç–µ–º–∞"
                                            value={formData.customSubtopic}
                                            onChange={(e) => setFormData({ ...formData, customSubtopic: e.target.value })}
                                        />
                                    </Grid>
                                </>
                            )}
                        </>
                    )}

                    {(formData.mode === 'professional' ||
                        (formData.mode === 'personal' && formData.subType === 'free')) && (
                        <>
                            <Grid item xs={6}>
                                <TextField
                                    fullWidth
                                    type="number"
                                    label="–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–º–∏–Ω—É—Ç)"
                                    value={formData.timer}
                                    onChange={(e) => setFormData({ ...formData, timer: e.target.value })}
                                    required
                                    inputProps={{ min: 1, max: 1500 }}
                                />
                            </Grid>
                            <Grid item xs={6}>
                                <TextField
                                    fullWidth
                                    type="number"
                                    label="–ú–∞–∫—Å. —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"
                                    value={formData.maxParticipants}
                                    onChange={(e) => setFormData({ ...formData, maxParticipants: e.target.value })}
                                    inputProps={{ min: 2, max: 20 }}
                                />
                            </Grid>
                        </>
                    )}
                </Grid>
            )}

            {step === 2 && (
                <Grid container spacing={2}>
                    {formData.mode === 'personal' ? (
                        <>
                            <Grid item xs={12}>
                                <TextField
                                    fullWidth
                                    multiline
                                    rows={3}
                                    label="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ"
                                    value={formData.description}
                                    onChange={(e) => setFormData({ ...formData, description: e.target.value })}
                                />
                            </Grid>
                            <Grid item xs={12}>
                                <FormControl component="fieldset">
                                    <FormLabel component="legend">–î–æ—Å—Ç—É–ø</FormLabel>
                                    <RadioGroup
                                        row
                                        value={formData.accessType}
                                        onChange={(e) => {
                                            const newAccessType = e.target.value;
                                            setFormData({
                                                ...formData,
                                                accessType: newAccessType,
                                                password: newAccessType === 'open' ? '' : formData.password,
                                            });
                                        }}
                                    >
                                        <FormControlLabel
                                            value="open"
                                            control={<Radio />}
                                            label="–û—Ç–∫—Ä—ã—Ç–∞—è"
                                        />
                                        <FormControlLabel
                                            value="closed"
                                            control={<Radio />}
                                            label="–ó–∞–∫—Ä—ã—Ç–∞—è"
                                        />
                                    </RadioGroup>
                                </FormControl>
                            </Grid>
                            {formData.accessType === 'closed' && (
                                <Grid item xs={12}>
                                    <TextField
                                        fullWidth
                                        type="password"
                                        label="–ü–∞—Ä–æ–ª—å"
                                        value={formData.password}
                                        onChange={(e) => setFormData({ ...formData, password: e.target.value })}
                                        required
                                    />
                                </Grid>
                            )}
                        </>
                    ) : (
                        <>
                            <Grid item xs={12}>
                                <TextField
                                    select
                                    fullWidth
                                    label="–¶–µ–ª—å –æ–±—Å—É–∂–¥–µ–Ω–∏—è"
                                    value={formData.purpose}
                                    onChange={(e) => setFormData({ ...formData, purpose: e.target.value })}
                                    required
                                >
                                    {professionalPurposes.map((purpose) => (
                                        <MenuItem key={purpose} value={purpose}>
                                            {purpose}
                                        </MenuItem>
                                    ))}
                                </TextField>
                            </Grid>
                            <Grid item xs={12}>
                                <TextField
                                    fullWidth
                                    multiline
                                    rows={3}
                                    label="–ö–ª—é—á–µ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã (–∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏)"
                                    value={formData.keyQuestions}
                                    onChange={(e) => setFormData({ ...formData, keyQuestions: e.target.value })}
                                />
                            </Grid>
                            <Grid item xs={12}>
                                <TextField
                                    fullWidth
                                    label="–ú–µ—Ç–∫–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)"
                                    value={formData.tags}
                                    onChange={(e) => setFormData({ ...formData, tags: e.target.value })}
                                />
                            </Grid>
                            <Grid item xs={12}>
                                <TextField
                                    fullWidth
                                    type="password"
                                    label="–ü–∞—Ä–æ–ª—å"
                                    value={formData.password}
                                    onChange={(e) => setFormData({ ...formData, password: e.target.value })}
                                    required
                                />
                            </Grid>
                            <Grid item xs={12}>
                                <FormGroup>
                                    <FormControlLabel
                                        control={
                                            <Checkbox
                                                checked={formData.hidden}
                                                onChange={(e) => setFormData({ ...formData, hidden: e.target.checked })}
                                            />
                                        }
                                        label="–°–∫—Ä—ã—Ç—å –∫–æ–º–Ω–∞—Ç—É –∏–∑ –æ–±—â–µ–≥–æ —Å–ø–∏—Å–∫–∞"
                                    />
                                    <FormControlLabel
                                        control={
                                            <Checkbox
                                                checked={formData.exportOptions.includes('csv')}
                                                onChange={(e) => {
                                                    const options = e.target.checked
                                                        ? [...formData.exportOptions, 'csv']
                                                        : formData.exportOptions.filter(o => o !== 'csv');
                                                    setFormData({ ...formData, exportOptions: options });
                                                }}
                                            />
                                        }
                                        label="–†–∞–∑—Ä–µ—à–∏—Ç—å —ç–∫—Å–ø–æ—Ä—Ç –≤ CSV"
                                    />
                                    <FormControlLabel
                                        control={
                                            <Checkbox
                                                checked={formData.exportOptions.includes('graph')}
                                                onChange={(e) => {
                                                    const options = e.target.checked
                                                        ? [...formData.exportOptions, 'graph']
                                                        : formData.exportOptions.filter(o => o !== 'graph');
                                                    setFormData({ ...formData, exportOptions: options });
                                                }}
                                            />
                                        }
                                        label="–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≥—Ä–∞—Ñ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π"
                                    />
                                    <FormControlLabel
                                        control={
                                            <Checkbox
                                                checked={formData.dontJoin}
                                                onChange={(e) => setFormData({ ...formData, dontJoin: e.target.checked })}
                                            />
                                        }
                                        label="–ù–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è—Ç—å –º–µ–Ω—è –≤ –∫–æ–º–Ω–∞—Ç—É"
                                    />
                                </FormGroup>
                            </Grid>
                        </>
                    )}
                </Grid>
            )}

            <Box sx={{ mt: 3, display: 'flex', justifyContent: 'space-between' }}>
                {step === 2 && (
                    <Button variant="outlined" onClick={() => setStep(1)}>
                        –ù–∞–∑–∞–¥
                    </Button>
                )}
                <Button
                    variant="contained"
                    onClick={handleNextStep}
                    disabled={
                        (step === 1 && !validateStep1()) ||
                        (step === 2 && !validateStep2())
                    }
                >
                    {step === 1 ? '–î–∞–ª–µ–µ' : '–°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É'}
                </Button>
            </Box>
        </Container>
    );
};

export default RoomCreate;
