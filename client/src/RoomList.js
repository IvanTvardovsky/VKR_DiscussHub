import React, { useState, useEffect, useRef } from 'react';
import {
    Button,
    TextField,
    Typography,
    Container,
    Grid,
    Card,
    CardContent,
    CardActions,
    CardHeader,
    Dialog,
    DialogTitle,
    DialogContent,
    DialogContentText,
    DialogActions,
    MenuItem,
    Box
} from '@mui/material';

const topics = [
    { id: 1, title: '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', icon: 'üíª' },
    { id: 2, title: '–ó–¥–æ—Ä–æ–≤—å–µ –∏ –±–ª–∞–≥–æ–ø–æ–ª—É—á–∏–µ', icon: 'üè•' },
    { id: 3, title: '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏ —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ', icon: 'üìö' },
    { id: 4, title: '–ò—Å–∫—É—Å—Å—Ç–≤–æ –∏ –∫—É–ª—å—Ç—É—Ä–∞', icon: 'üé®' },
    { id: 5, title: '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –∏ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è', icon: '‚úàÔ∏è' },
    { id: 6, title: '–≠–∫–æ–ª–æ–≥–∏—è –∏ —É—Å—Ç–æ–π—á–∏–≤–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ', icon: 'üå±' }
];

const subtopics = {
    1: [
        { id: 101, title: '–ö–∞–∫ –ò–ò –≤–ª–∏—è–µ—Ç –Ω–∞ —Ä—ã–Ω–æ–∫ —Ç—Ä—É–¥–∞?' },
        { id: 102, title: '–≠—Ç–∏–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–≤—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π' },
        { id: 103, title: '–†–∞–∑–≤–∏—Ç–∏–µ –∫–≤–∞–Ω—Ç–æ–≤—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π' },
        { id: 104, title: '–ò–Ω—Ç–µ—Ä–Ω–µ—Ç –≤–µ—â–µ–π (IoT)' },
        { id: 105, title: '–ö–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å' }
    ],
    2: [
        { id: 201, title: '–ó–¥–æ—Ä–æ–≤–æ–µ –ø–∏—Ç–∞–Ω–∏–µ' },
        { id: 202, title: '–§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å' },
        { id: 203, title: '–ü—Å–∏—Ö–∏—á–µ—Å–∫–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ' },
        { id: 204, title: '–ú–µ–¥–∏—Ç–∞—Ü–∏—è –∏ —Ä–µ–ª–∞–∫—Å–∞—Ü–∏—è' },
        { id: 205, title: '–ü—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∞ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π' }
    ],
    3: [
        { id: 301, title: '–û–Ω–ª–∞–π–Ω-–∫—É—Ä—Å—ã' },
        { id: 302, title: '–ß—Ç–µ–Ω–∏–µ –∏ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞' },
        { id: 303, title: '–Ø–∑—ã–∫–æ–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ' },
        { id: 304, title: '–ù–∞–≤—ã–∫–∏ –±—É–¥—É—â–µ–≥–æ' },
        { id: 305, title: '–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏' }
    ],
    4: [
        { id: 401, title: '–°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–æ' },
        { id: 402, title: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –º—É–∑—ã–∫–∞' },
        { id: 403, title: '–ö–∏–Ω–æ –∏ —Ç–µ–∞—Ç—Ä' },
        { id: 404, title: '–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞ –∏ –ø–æ—ç–∑–∏—è' },
        { id: 405, title: '–ö—É–ª—å—Ç—É—Ä–Ω–æ–µ –Ω–∞—Å–ª–µ–¥–∏–µ' }
    ],
    5: [
        { id: 501, title: '–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è' },
        { id: 502, title: '–ö—É–ª—å—Ç—É—Ä–Ω—ã–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è' },
        { id: 503, title: '–ü—Ä–∏–∫–ª—é—á–µ–Ω—á–µ—Å–∫–∏–π —Ç—É—Ä–∏–∑–º' },
        { id: 504, title: '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è —Å —Å–µ–º—å–µ–π' },
        { id: 505, title: '–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π' }
    ],
    6: [
        { id: 601, title: '–í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º–∞—è —ç–Ω–µ—Ä–≥–∏—è' },
        { id: 602, title: '–≠–∫–æ-–∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã' },
        { id: 603, title: '–ó–µ–ª–µ–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏' },
        { id: 604, title: '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–∏–æ—Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è' },
        { id: 605, title: '–£—Å—Ç–æ–π—á–∏–≤–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ' }
    ]
};

const getTopicNameById = (topicId) => {
    const topic = topics.find((t) => t.id === topicId);
    return topic ? `${topic.icon} ${topic.title}` : 'N/A';
};

const getSubtopicNameById = (topicId, subtopicId) => {
    if (!topicId || !subtopicId) return 'N/A';
    const group = subtopics[topicId];
    if (!group) return 'N/A';
    const sub = group.find((s) => s.id === subtopicId);
    return sub ? sub.title : 'N/A';
};

const RoomList = ({ onJoinRoom }) => {
    const [availableRooms, setAvailableRooms] = useState([]);
    const [filterTopic, setFilterTopic] = useState(0); // 0 ‚Äì –≤—Å–µ —Ç–æ–ø–∏–∫–∏
    const [filterSubtopic, setFilterSubtopic] = useState(0); // 0 ‚Äì –≤—Å–µ —Å—É–±—Ç–æ–ø–∏–∫–∏
    const socketRef = useRef(null);

    const [openDirectJoin, setOpenDirectJoin] = useState(false);
    const [directRoomId, setDirectRoomId] = useState('');
    const [directRoomPassword, setDirectRoomPassword] = useState('');
    const [openDialog, setOpenDialog] = useState(false);
    const [selectedRoomId, setSelectedRoomId] = useState(null);
    const [dialogPassword, setDialogPassword] = useState('');

    useEffect(() => {
        const socket = new WebSocket('ws://127.0.0.1:8080/roomUpdates');
        socketRef.current = socket;

        socket.onopen = () => {
            console.log('Connected to room updates WebSocket');
            sendFilterUpdate(filterTopic, filterSubtopic);
        };

        socket.onmessage = (event) => {
            const rooms = JSON.parse(event.data);
            setAvailableRooms(rooms);
        };

        socket.onclose = (event) => {
            console.log('Room updates socket closed:', event);
        };

        socket.onerror = (error) => {
            console.log('Room updates socket error:', error);
        };

        return () => {
            socket.close();
        };
    }, []);

    const sendFilterUpdate = (topic, subtopic) => {
        if (socketRef.current && socketRef.current.readyState === WebSocket.OPEN) {
            const filterData = { type: 'filter', topic, subtopic };
            socketRef.current.send(JSON.stringify(filterData));
        }
    };

    const handleFilterTopicChange = (e) => {
        const newTopic = parseInt(e.target.value, 10);
        setFilterTopic(newTopic);
        setFilterSubtopic(0);
        sendFilterUpdate(newTopic, 0);
    };

    const handleFilterSubtopicChange = (e) => {
        const newSubtopic = parseInt(e.target.value, 10);
        setFilterSubtopic(newSubtopic);
        sendFilterUpdate(filterTopic, newSubtopic);
    };

    const handleJoinRoomClick = (room) => {
        if (room.open) {
            onJoinRoom(room.id, '');
        } else {
            setSelectedRoomId(room.id);
            setOpenDialog(true);
        }
    };

    const handleDialogClose = () => {
        setOpenDialog(false);
        setDialogPassword('');
        setSelectedRoomId(null);
    };

    const handleJoinRoomWithPassword = () => {
        if (selectedRoomId !== null) {
            onJoinRoom(selectedRoomId, dialogPassword);
            handleDialogClose();
        }
    };

    const handleDirectJoin = () => {
        if (directRoomId.trim() !== '') {
            onJoinRoom(directRoomId.trim(), directRoomPassword.trim());
            setOpenDirectJoin(false);
            setDirectRoomId('');
            setDirectRoomPassword('');
        }
    };

    const renderRoomTopic = (room) => {
        if (room.mode === 'personal') {
            if (room.subType === 'blitz') {
                return (
                    <>
                        <Typography variant="body2" color="text.secondary" component="p">
                            –¢–æ–ø–∏–∫: {getTopicNameById(room.topic)}
                        </Typography>
                        <Typography variant="body2" color="text.secondary" component="p">
                            –°—É–±—Ç–æ–ø–∏–∫: {getSubtopicNameById(room.topic, room.subtopic)}
                        </Typography>
                    </>
                );
            } else if (room.subType === 'free') {
                return (
                    <>
                        <Typography variant="body2" color="text.secondary" component="p">
                            –¢–µ–º–∞: {room.customTopic}
                        </Typography>
                        <Typography variant="body2" color="text.secondary" component="p">
                            –ü–æ–¥—Ç–µ–º–∞: {room.customSubtopic}
                        </Typography>
                    </>
                );
            }
        }

        if (room.mode === 'professional') {
            return (
                <Typography variant="body2" color="text.secondary" component="p">
                    –¶–µ–ª—å: {room.purpose}
                </Typography>
            );
        }
        return null;
    };

    return (
        <Container component="main" maxWidth="lg">
            <Box display="flex" justifyContent="space-between" alignItems="center" mb={2}>
                <Typography variant="h5" component="h2">
                    –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã
                </Typography>
                <Button variant="outlined" onClick={() => setOpenDirectJoin(true)}>
                    –í–æ–π—Ç–∏ –ø–æ ID –∫–æ–º–Ω–∞—Ç—ã
                </Button>
            </Box>

            <Box display="flex" gap={2} mb={2}>
                <TextField
                    select
                    label="–¢–æ–ø–∏–∫"
                    value={filterTopic}
                    onChange={handleFilterTopicChange}
                    size="small"
                >
                    <MenuItem value={0}>–í—Å–µ —Ç–æ–ø–∏–∫–∏</MenuItem>
                    {topics.map((topic) => (
                        <MenuItem key={topic.id} value={topic.id}>
                            {topic.title}
                        </MenuItem>
                    ))}
                </TextField>
                <TextField
                    select
                    label="–°—É–±—Ç–æ–ø–∏–∫"
                    value={filterSubtopic}
                    onChange={handleFilterSubtopicChange}
                    size="small"
                    disabled={filterTopic === 0}
                >
                    <MenuItem value={0}>–í—Å–µ —Å—É–±—Ç–æ–ø–∏–∫–∏</MenuItem>
                    {filterTopic !== 0 &&
                        subtopics[filterTopic]?.map((sub) => (
                            <MenuItem key={sub.id} value={sub.id}>
                                {sub.title}
                            </MenuItem>
                        ))}
                </TextField>
            </Box>

            <Grid container spacing={3} sx={{ padding: 3 }}>
                {availableRooms.map((room) => (
                    <Grid
                        item
                        key={room.id}
                        xs={12}
                        sm={6}
                        md={4}
                        lg={3}
                        xl={2}
                        sx={{
                            display: 'flex',
                            minWidth: 300,
                        }}
                    >
                        <Card
                            variant="outlined"
                            sx={{
                                width: '100%',
                                height: '100%',
                                display: 'flex',
                                flexDirection: 'column',
                                justifyContent: 'space-between',
                                borderRadius: 2,
                                boxShadow: 3,
                                transition: 'transform 0.3s, box-shadow 0.3s',
                                '&:hover': {
                                    transform: 'scale(1.03)',
                                    boxShadow: 6
                                }
                            }}
                        >
                            <CardHeader
                                title={
                                    <Typography variant="h6" component="div">
                                        {room.name}
                                    </Typography>
                                }
                                subheader={
                                    <>
                                        {`ID: ${room.id} ‚Äî ${room.open ? '–û—Ç–∫—Ä—ã—Ç–∞—è' : '–ó–∞–∫—Ä—ã—Ç–∞—è'}`}
                                        {room.discussionActive && " ‚Ä¢ –ê–∫—Ç–∏–≤–Ω–∞—è –¥–∏—Å–∫—É—Å—Å–∏—è"}
                                    </>
                                }
                            />
                            <CardContent>
                                <Typography variant="body2" color="text.secondary" component="p">
                                    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {room.users}/{room.maxUsers}
                                </Typography>
                                {renderRoomTopic(room)}
                                {room.duration > 0 && (
                                    <Typography variant="body2" color="text.secondary" component="p">
                                        –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {room.duration} –º–∏–Ω
                                    </Typography>
                                )}
                                {room.discussionActive && (
                                    <Typography
                                        variant="body2"
                                        color="error.main"
                                        component="p"
                                        sx={{ mt: 1, fontWeight: 'bold' }}
                                    >
                                        –î–∏—Å–∫—É—Å—Å–∏—è —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å
                                    </Typography>
                                )}
                            </CardContent>

                            {!room.discussionActive && (
                                <CardActions>
                                    <Button
                                        variant="contained"
                                        color="primary"
                                        size="small"
                                        onClick={() => handleJoinRoomClick(room)}
                                    >
                                        –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è
                                    </Button>
                                </CardActions>
                            )}
                        </Card>
                    </Grid>
                ))}
            </Grid>

            <Dialog open={openDirectJoin} onClose={() => setOpenDirectJoin(false)}>
                <DialogTitle>–í—Ö–æ–¥ –ø–æ ID –∫–æ–º–Ω–∞—Ç—ã</DialogTitle>
                <DialogContent>
                    <DialogContentText>
                        –í–≤–µ–¥–∏—Ç–µ ID –∫–æ–º–Ω–∞—Ç—ã –∏, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è, –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞.
                    </DialogContentText>
                    <TextField
                        autoFocus
                        margin="dense"
                        label="Room ID"
                        fullWidth
                        value={directRoomId}
                        onChange={(e) => setDirectRoomId(e.target.value)}
                    />
                    <TextField
                        margin="dense"
                        label="–ü–∞—Ä–æ–ª—å"
                        type="password"
                        fullWidth
                        value={directRoomPassword}
                        onChange={(e) => setDirectRoomPassword(e.target.value)}
                    />
                </DialogContent>
                <DialogActions>
                    <Button onClick={() => setOpenDirectJoin(false)} color="primary">
                        –û—Ç–º–µ–Ω–∞
                    </Button>
                    <Button onClick={handleDirectJoin} color="primary">
                        –í–æ–π—Ç–∏
                    </Button>
                </DialogActions>
            </Dialog>

            <Dialog open={openDialog} onClose={handleDialogClose}>
                <DialogTitle>–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å</DialogTitle>
                <DialogContent>
                    <DialogContentText>
                        –≠—Ç–∞ –∫–æ–º–Ω–∞—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∞. –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞.
                    </DialogContentText>
                    <TextField
                        autoFocus
                        margin="dense"
                        label="–ü–∞—Ä–æ–ª—å"
                        type="password"
                        fullWidth
                        value={dialogPassword}
                        onChange={(e) => setDialogPassword(e.target.value)}
                    />
                </DialogContent>
                <DialogActions>
                    <Button onClick={handleDialogClose} color="primary">
                        –û—Ç–º–µ–Ω–∞
                    </Button>
                    <Button onClick={handleJoinRoomWithPassword} color="primary">
                        –í–æ–π—Ç–∏
                    </Button>
                </DialogActions>
            </Dialog>
        </Container>
    );
};

export default RoomList;
